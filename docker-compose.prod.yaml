version: '3.8'

services:
  nginx:
    build: ./nginx
    ports:
      - "1773:80"  # Expose only HTTP
    depends_on:
      - web
    volumes:
      - media_volume:/usr/src/backend/media
      - static_volume:/usr/src/backend/staticfiles  # Ensure this matches STATIC_ROOT
    networks:
      - backend  # Attach nginx to the backend network

  web:
    build: ./backend
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py collectstatic --noinput && gunicorn django_backend.wsgi:application --bind 0.0.0.0:8010 --log-level debug"
    volumes:
      - ./backend:/usr/src/backend
      - media_volume:/usr/src/backend/media  # Correct path to media volume
      - static_volume:/usr/src/backend/staticfiles  # Ensure this matches STATIC_ROOT
      - ./backend/logs:/usr/src/backend/logs  # Mount logs directory
    expose:
      - 8010
    env_file:
      - ./.env
    depends_on:
      - db
      - daphne
    networks:
      - backend  # Attach web service to the backend network

  daphne:
    build: ./backend
    command: daphne --bind 0.0.0.0 -p 8002 django_backend.asgi:application
    ports:
      - 8002:8002
    volumes:
      - ./backend:/usr/src/backend  # Ensure daphne has access to the backend
      - ./backend/logs:/usr/src/backend/logs
    networks:
      - backend  # Attach daphne service to the backend network

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=djangodb
    networks:
      - backend  # Attach db service to the backend network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend  # Attach redis service to the backend network

  celery:
    build:
      context: ./backend  # Adjust to point to the correct directory containing Dockerfile
    container_name: celery
    command: celery -A django_backend worker --loglevel=info
    volumes:
      - ./backend:/usr/src/backend
      - celery_volume:/usr/src/backend/celery  # Added a volume for celery to persist data if needed
    depends_on:
      - redis
    networks:
      - backend  # Attach celery service to the backend network

  celery_beat:
    build:
      context: ./backend
    container_name: celery_beat
    command: celery -A django_backend beat --loglevel=info
    volumes:
      - ./backend:/usr/src/backend
      - celery_beat_volume:/usr/src/backend/celery_beat  # Added a volume for celery_beat
    depends_on:
      - redis
      - celery
    networks:
      - backend  # Attach celery_beat service to the backend network

volumes:
  postgres_data:
  media_volume:
  static_volume:
  celery_volume:  # Added volume for celery
  celery_beat_volume:  # Added volume for celery_beat
  


networks:
  backend:
    driver: bridge  # Define the network so that all services are connected to it
